{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "k sources, l rounds (k <= l)\n",
    "\n",
    "Li: 除去 i - 1 round leaves后剩下的node i<= l\n",
    "Bi: 距离burned过的nodes为1的nodes\n",
    "\n",
    "R1 = L1/B1 \n",
    "...\n",
    "Rl = Ll/Bl\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "get matrix, k , l\n",
    "S0: initialize Ri by Li\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import networkx as nx\n",
    "from numpy.linalg import matrix_power\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import copy as cp"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 0 transfrom"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "#generate\n",
    "g = nx.random_tree(20)\n",
    "# to adj matrix\n",
    "A = nx.adjacency_matrix(g)\n",
    "A = A.todense()\n",
    "A = np.array(A)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## S0: build graph"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# generate\n",
    "N = 9\n",
    "g = nx.random_tree(N)\n",
    "g_copy = cp.deepcopy(g)\n",
    "# draw \n",
    "nx.draw(g, with_labels=True, font_weight='bold')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## S1.1 Initialize Llist"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nnotimportant = range(N)\\nL_list.append(notimportant)\\nL_list\\n'"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "k = 3\n",
    "l = 3\n",
    "#1. list detect whether all nodes are visited\n",
    "\n",
    "L_list = []\n",
    "'''\n",
    "notimportant = range(N)\n",
    "L_list.append(notimportant)\n",
    "L_list\n",
    "'''"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## S1.2 makeLL"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "' '"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def updateL(input, g):\n",
    "    '''\n",
    "    input: all vertex this level \n",
    "    1. get all leaves\n",
    "    2. delete all leaves\n",
    "    '''\n",
    "    #S1 get all leaves\n",
    "    temp = [x for x in g.nodes() if g.degree(x)==1]\n",
    "    #S2.1 remove leaves from graph\n",
    "    for i in range(len(temp)):\n",
    "        g.remove_node(temp[i])\n",
    "    #S2.2 return all non-leaves \n",
    "    return [x for x in input if x not in temp]\n",
    "\n",
    "\n",
    "g = cp.deepcopy(g_copy) #0 copy original graph\n",
    "initial = range(N) \n",
    "for i in range(l): # who decide rounds??: l\n",
    "    leaves = updateL(initial, g) #get leaves left over\n",
    "    initial = cp.deepcopy(leaves)\n",
    "    \n",
    "    L_list.append(initial)\n",
    "    #print(leaves, len(leaves))\n",
    "L_list\n",
    "''' '''#uncomment to show process graphs\n",
    "nx.draw(g, with_labels=True, font_weight='bold')\n",
    "plt.show()\n",
    "''' '''"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[0, 1, 2, 3, 7, 8], [0, 1, 2, 7], [0, 1]]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# reverse so the order is: 1st source, 2nd source, ... , kth source\n",
    "L_list.reverse()\n",
    "L_list\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## S2.0 initialize R and source"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-1., -1., -1.])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''\n",
    "1.source：\n",
    "每当找到一个source， 就更新里面的数值； 如果全burn了， 就返回source 因为他就是burning sequence\n",
    "tip： 设计一个best sequence（最短的），不能burn了返回\n",
    "2. visited：这个图的每个node有没有被burn（也可以不用）\n",
    " 0: visited; 1: unvisited \n",
    "'''\n",
    "source = -1*np.ones(k)\n",
    "visited = np.ones([N]) # 0: visited; 1: unvisited \n",
    "source"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## S2.1 update R[i+1] based on R[i]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "#get B \n",
    "def findB(burned, gg):\n",
    "    '''\n",
    "    burned: burned nodes in the last round； 截至到上一回合，已经被burn的nodes， 应该是list进来\n",
    "    gg: graph 我们的总图\n",
    "    '''\n",
    "    nodes_toremove = cp.copy(burned)\n",
    "    # find all bunred vertice's neignbors\n",
    "    for i in range(burned):\n",
    "        nb_of_source = nx.all_neighbors(gg, burned[i])\n",
    "        \n",
    "        for x in nb_of_source:\n",
    "            if x not in nodes_toremove: # keep unique\n",
    "                nodes_toremove.append(x)\n",
    "    \n",
    "    return nodes_toremove #返回B set\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32mC:\\Users\\Public\\Documents\\Wondershare\\CreatorTemp/ipykernel_5476/2495118277.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;31m#initialize source1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 6\u001b[1;33m \u001b[0msource\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mL_list\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;31m#record source1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      7\u001b[0m \u001b[0mMark\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m0\u001b[0m \u001b[1;31m#visit source1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[0mR_dynamic\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mremove\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msource\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;31m#remove\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": [
    "\n",
    "#S1 initialize\n",
    "R_dynamic = [cp.copy(L_list[0])] # list for dynamic R\n",
    "level = [] # record all burned\n",
    "\n",
    "bestsequence = [[], 0]# need update\n",
    "burned = []\n",
    "l_round = l\n",
    "g2 = cp.copy(g_copy) #copy original graph\n",
    "#Mark = [np.ones(len(L_list[0]))] # visited signal of dynamic R\n",
    "\n",
    "def updateR(num):\n",
    "    # 0 judge and recursion\n",
    "    if len(R_dynamic[num]) == 0: #this row does not exist\n",
    "        if i == 0: \n",
    "            return bestsequence\n",
    "        else:\n",
    "            # Walk up\n",
    "            R_dynamic.remove(R_dynamic[num])\n",
    "            level.remove(level[num - 1])\n",
    "            l_round = l_round + 1\n",
    "            updateR(num - 1)\n",
    "  \n",
    "    #this_burned = []\n",
    "    # 1. pick burn and remove \n",
    "    source[num] = R_dynamic[num][0]\n",
    "    R_dynamic.remove(R_dynamic[num][0])\n",
    "    burned.append(source[num])\n",
    "    #this_burned.append(source[num])\n",
    "    \n",
    "    # 2. update R\n",
    "    \n",
    "    # 2.1 get all burned nodes(B) in this round\n",
    "    B = findB(burned, g2)\n",
    "    \n",
    "    # 2.2 update level\n",
    "    if len(level) == 0:\n",
    "        level.append(B)\n",
    "    else:\n",
    "        level.append([node for node in B if node not in level[num - 1]])\n",
    "    \n",
    "    burned = B#因为就相当于都被burn了\n",
    "    \n",
    "    # 2.2 get L/B and update to the total R\n",
    "    temp = [node for node in L_list[num] if node not in B]\n",
    "    R_dynamic.append(temp)\n",
    "    \n",
    "    # 3. Walk down: if have not reach the k-1 level to next level(0, 1, ..., k-2, k-1)\n",
    "    l_round = l_round - 1\n",
    "    if num < k - 2: \n",
    "        updateR(num + 1)\n",
    "    \n",
    "\n",
    "#start of alogrithm\n",
    "updateR(0)\n",
    "while True:\n",
    "    #oldburned = burned\n",
    "    while len(R_dynamic[k - 1]) != 0:\n",
    "        source[k - 1] = R_dynamic[k - 1][0] # pick 1st \n",
    "        R_dynamic[k-1].remove(R_dynamic[k - 1][0]) #remove 1st\n",
    "        \n",
    "        burned.append(source[k-1]) \n",
    "        B = burned\n",
    "        \n",
    "        #burned B for rest rounds\n",
    "        for rest_rounds in range(l_round):\n",
    "            B = findB(B)\n",
    "        \n",
    "        if len(B) == N:\n",
    "            print(source)\n",
    "            break\n",
    "            #return source\n",
    "        burned.remove(source[k-1])\n",
    "        if bestsequence[1] < len(B):\n",
    "            bestsequence[0] = source     \n",
    "    R_dynamic.remove(R_dynamic[k - 1])         \n",
    "    level.remove(level[k-1])\n",
    "    updateR(k-2)\n",
    "\n",
    "'''\n",
    "     if len(R_dynamic[num]) == 0:\n",
    "        if i == 0: \n",
    "            return bestsequence\n",
    "        else:\n",
    "            Mark.remove(Mark[num])\n",
    "            R_dynamic.remove(R_dynamic[num])\n",
    "            updateR(num - 1)\n",
    "     if sum(Mark[num]) == 0:\n",
    "        if i == 0: \n",
    "            return bestsequence\n",
    "        else:# WWWW: walk up\n",
    "            Mark.remove(Mark[num])\n",
    "            R_dynamic.remove(R_dynamic[num])\n",
    "            updateR(num - 1)           \n",
    "    \n",
    " '''\n",
    " # burn for l rounds?\n",
    " # remove burn\n",
    "      "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "for col in range(k):#col traversal\n",
    "    \n",
    "    if R_dynamic[0] == []:\n",
    "        continue\n",
    "    source[k] = L_list[k][0]\n",
    "    \n",
    "#initialize source1\n",
    "source[0] = L_list[0][0] #record source1\n",
    "Mark[0][0] = 0 #visit source1\n",
    "R_dynamic[0].remove(source[0]) #remove\n",
    "\n",
    "g2 = cp.copy(g_copy) #复制一份原图，专门来用\n",
    "B = findB(source[0], g2)\n",
    "R_dynamic.append([node for node in L_list[1] if node not in B])\n",
    "#for i in range(k):\n",
    "    \n",
    "\n",
    "'''\n",
    "for i in range(k): #pick k sources\n",
    "    for j in range(R_list[i]):\n",
    "'''  \n",
    "    \n",
    "print(source, Mark, B)\n",
    "R_dynamic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([1, 2]), [[], 2], [[], 2]]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = []\n",
    "B = [A, 2]\n",
    "B[0]\n",
    "B[0] = np.array([1,2,3])\n",
    "B[0] = np.array([1,2])\n",
    "B[1] = [A, 2]\n",
    "for i in range(5):\n",
    "    B.append([A, 2])\n",
    "B[0:3]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "def isklburnable(g, k, l):\n",
    "    '''\n",
    "    g: graph with networkx form\n",
    "    k: number of sources\n",
    "    l: number of rounds\n",
    "    '''\n",
    "    \n",
    "    # Step0: get information\n",
    "    N = nx.number_of_nodes(g)\n",
    "    g_copy = cp.deepcopy(g)\n",
    "    ''' '''\n",
    "    #tip1: uncomment to draw origin graph\n",
    "    print(\"input graph:\")\n",
    "    nx.draw(g, with_labels=True, font_weight='bold')\n",
    "    plt.show()\n",
    "    ''' '''\n",
    "    \n",
    "    # Step1: get L\n",
    "    L_list = []\n",
    "    \n",
    "    def updateL(input, g):\n",
    "        #S1 get all leaves\n",
    "        temp = [x for x in g.nodes() if g.degree(x)==1]\n",
    "        #S2.1 remove leaves from graph\n",
    "        for i in range(len(temp)):\n",
    "            g.remove_node(temp[i])\n",
    "        #S2.2 return all non-leaves \n",
    "        return [x for x in input if x not in temp]\n",
    "    \n",
    "    \n",
    "    gl = cp.deepcopy(g_copy) #used for l\n",
    "    initial = range(N) \n",
    "    \n",
    "    for i in range(l): # who decide rounds??: l\n",
    "        leaves = updateL(initial, gl) #get leaves left over\n",
    "        initial = cp.deepcopy(leaves)\n",
    "    \n",
    "        L_list.append(initial)\n",
    "    \n",
    "    L_list.reverse()\n",
    "    L_list = L_list[0:k] #only get 1st k rows\n",
    "    ''' '''\n",
    "    #tip2: uncomment to show process graphs\n",
    "    nx.draw(gl, with_labels=True, font_weight='bold')\n",
    "    plt.show()\n",
    "    print(L_list)\n",
    "    ''' '''\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "input graph:\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1, 4], [1, 4, 8, 11], [0, 1, 4, 6, 8, 9, 11]]\n"
     ]
    }
   ],
   "source": [
    "g = nx.random_tree(12)\n",
    "isklburnable(g, 4, 3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "def isklburnable(g, k, l):\n",
    "    '''\n",
    "    g: graph with networkx form\n",
    "    k: number of sources\n",
    "    l: number of rounds\n",
    "    '''\n",
    "    \n",
    "    ################## Step0: get information\n",
    "    N = nx.number_of_nodes(g)\n",
    "    g_copy = cp.deepcopy(g)\n",
    "    ''' '''\n",
    "    #tip1: uncomment to draw origin graph\n",
    "    print(\"input graph\")\n",
    "    nx.draw(g, with_labels=True, font_weight='bold')\n",
    "    plt.show()\n",
    "    ''' '''\n",
    "    \n",
    "    ################## Step1: get L\n",
    "    L_list = []\n",
    "    \n",
    "    def updateL(input, g):\n",
    "        #S1 get all leaves\n",
    "        temp = [x for x in g.nodes() if g.degree(x)==1]\n",
    "        #S2.1 remove leaves from graph\n",
    "        for i in range(len(temp)):\n",
    "            g.remove_node(temp[i])\n",
    "        #S2.2 return all non-leaves \n",
    "        return [x for x in input if x not in temp]\n",
    "    \n",
    "    gl = cp.deepcopy(g_copy) #used for l\n",
    "    initial = range(N) \n",
    "    \n",
    "    for i in range(l): # who decide rounds??: l\n",
    "        leaves = updateL(initial, gl) #get leaves left over\n",
    "        initial = cp.deepcopy(leaves)\n",
    "    \n",
    "        L_list.append(initial)\n",
    "    \n",
    "    L_list.reverse()\n",
    "    L_list = L_list[0:k] #only get 1st k rows\n",
    "    ''' \n",
    "    #tip2: uncomment to show process graphs\n",
    "    print(\"rest graph\")\n",
    "    nx.draw(gl, with_labels=True, font_weight='bold')\n",
    "    plt.show()\n",
    "    ''' \n",
    "    \n",
    "    ################## Step2\n",
    "    \n",
    "    def findB(burned, gg):\n",
    "        '''\n",
    "        input: \n",
    "        a) burned: list of burned nodes\n",
    "        b) gg: total graph\n",
    "        output:\n",
    "        nodes_burned_till_this_round\n",
    "        '''\n",
    "        nodes_burned_till_this_round = cp.copy(burned)\n",
    "        # find all bunred vertice's neignbors\n",
    "        for this_node in burned:\n",
    "            nb_of_source = nx.all_neighbors(gg, this_node)\n",
    "            \n",
    "            for x in nb_of_source:\n",
    "                if x not in nodes_burned_till_this_round: # keep unique\n",
    "                    nodes_burned_till_this_round.append(x)\n",
    "    \n",
    "        return nodes_burned_till_this_round #返回B set\n",
    "    \n",
    "    source = -1*np.ones(k) #burnding sequence\n",
    "    bestsequence = [[], 0] #1st entry: burning sequence; 2nd: number of burned nodes by this bs\n",
    "    \n",
    "    R_dynamic = [cp.copy(L_list[0])]\n",
    "    burned = []\n",
    "    #old_burned = []\n",
    "    level_burned = [] \n",
    "    \n",
    "    l_round = l - k\n",
    "    ''' '''\n",
    "    print(\"start here\")\n",
    "    print(\"R ini\")\n",
    "    print(R_dynamic)\n",
    "    \n",
    "    \n",
    "    ''' '''\n",
    "    def updateR(num, burned):\n",
    "        # 0 judge and recursion\n",
    "        \n",
    "        print(\"loop\")\n",
    "        print(num, \"time\", burned, \"\\n\")\n",
    "        \n",
    "        print(R_dynamic[num])\n",
    "        if len(R_dynamic[num]) == 0: #this row does not exist\n",
    "            if num == 0:\n",
    "                return \n",
    "                #return bestsequence[0]\n",
    "            else:\n",
    "            # Walk up\n",
    "                print(\"go up\")\n",
    "                print(R_dynamic)\n",
    "                print(level_burned)\n",
    "                R_dynamic.remove(R_dynamic[num])\n",
    "                level_burned.remove(level_burned[num - 1])\n",
    "                #l_round = l_round + 1\n",
    "                upburned = []\n",
    "                for i in level_burned:\n",
    "                    upburned = upburned + i\n",
    "                \n",
    "                updateR(num - 1, upburned)\n",
    "  \n",
    "        \n",
    "        # 1. pick burn and remove \n",
    "        source[num] = R_dynamic[num][0]\n",
    "        R_dynamic[num].remove(R_dynamic[num][0])\n",
    "        old_burned = cp.copy(burned)\n",
    "        burned.append(source[num])\n",
    "        \n",
    "    \n",
    "        # 2. update R\n",
    "    \n",
    "        # 2.1 get all burned nodes(B) in this round\n",
    "        B = findB(burned, g)\n",
    "        \n",
    "        print(burned)\n",
    "        print(B)\n",
    "        print(\"\\n\")\n",
    "        \n",
    "        # PS: 也可以让findB只返回新burn的vertices\n",
    "        # 2.2 burn\n",
    "        if len(level_burned) == 0:\n",
    "            level_burned.append(B)\n",
    "        else:\n",
    "            level_burned.append([node for node in B if node not in old_burned])\n",
    "        burned = B #update burn\n",
    "    \n",
    "    \n",
    "        # 2.2 get L/B and update to the total R\n",
    "        temp = [node for node in L_list[num] if node not in B]\n",
    "        R_dynamic.append(temp)\n",
    "        \n",
    "        \n",
    "        print(\"go down\")\n",
    "        print(R_dynamic)\n",
    "        print(level_burned)\n",
    "        # 3. Walk down: if have not reach the k-1 level， to next level(0, 1, ..., k-2, k-1)\n",
    "        # l_round = l_round - 1\n",
    "        if num < k - 2: \n",
    "            updateR(num + 1, burned)\n",
    "            \n",
    "        return burned\n",
    "    ####### process:\n",
    "    burned = updateR(0, burned)\n",
    "    while len(R_dynamic[0]) != 0:\n",
    "        while len(R_dynamic[k - 1]) != 0:\n",
    "            source[k - 1] = R_dynamic[k - 1][0] # pick 1st \n",
    "            R_dynamic[k-1].remove(R_dynamic[k - 1][0]) #remove 1st\n",
    "        \n",
    "            burned.append(source[k-1]) \n",
    "            B = burned\n",
    "        \n",
    "            #burned B for rest rounds\n",
    "            for rest_rounds in range(l_round):\n",
    "                B = findB(B)\n",
    "        \n",
    "            if len(B) == N:\n",
    "                return source\n",
    "            \n",
    "            burned.remove(source[k-1])\n",
    "            \n",
    "            if bestsequence[1] < len(B):\n",
    "                bestsequence[0] = source     \n",
    "        R_dynamic.remove(R_dynamic[k - 1])         \n",
    "        level_burned.remove(level_burned[k-1])\n",
    "        updateR(k-2, burned)   \n",
    "        \n",
    "        ''' '''\n",
    "        print(L_list)\n",
    "        print(R_dynamic)\n",
    "        print(burned)\n",
    "        print(level_burned)\n",
    "        \n",
    "        ''' '''\n",
    "    return bestsequence[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "input graph\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "start here\n",
      "R ini\n",
      "[[9, 11]]\n",
      "loop\n",
      "0 time [] \n",
      "\n",
      "[9, 11]\n",
      "[9.0]\n",
      "[9.0, 8, 11]\n",
      "\n",
      "\n",
      "go down\n",
      "[[11], []]\n",
      "[[9.0, 8, 11]]\n",
      "loop\n",
      "1 time [9.0, 8, 11] \n",
      "\n",
      "[]\n",
      "go up\n",
      "[[11], []]\n",
      "[[9.0, 8, 11]]\n",
      "loop\n",
      "0 time [] \n",
      "\n",
      "[11]\n",
      "[11.0]\n",
      "[11.0, 6, 9, 15]\n",
      "\n",
      "\n",
      "go down\n",
      "[[], []]\n",
      "[[11.0, 6, 9, 15]]\n",
      "loop\n",
      "1 time [11.0, 6, 9, 15] \n",
      "\n",
      "[]\n",
      "go up\n",
      "[[], []]\n",
      "[[11.0, 6, 9, 15]]\n",
      "loop\n",
      "0 time [] \n",
      "\n",
      "[]\n"
     ]
    },
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32mC:\\Users\\Public\\Documents\\Wondershare\\CreatorTemp/ipykernel_7708/2452234930.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mg\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mnx\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mrandom_tree\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m16\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0misklburnable\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mg\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m4\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;36m4\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;32mC:\\Users\\Public\\Documents\\Wondershare\\CreatorTemp/ipykernel_7708/42413006.py\u001b[0m in \u001b[0;36misklburnable\u001b[1;34m(g, k, l)\u001b[0m\n\u001b[0;32m    149\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mburned\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    150\u001b[0m     \u001b[1;31m####### process:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 151\u001b[1;33m     \u001b[0mburned\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mupdateR\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mburned\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    152\u001b[0m     \u001b[1;32mwhile\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mR_dynamic\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m!=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    153\u001b[0m         \u001b[1;32mwhile\u001b[0m \u001b[0mlen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mR_dynamic\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mk\u001b[0m \u001b[1;33m-\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;33m!=\u001b[0m \u001b[1;36m0\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Users\\Public\\Documents\\Wondershare\\CreatorTemp/ipykernel_7708/42413006.py\u001b[0m in \u001b[0;36mupdateR\u001b[1;34m(num, burned)\u001b[0m\n\u001b[0;32m    145\u001b[0m         \u001b[1;31m# l_round = l_round - 1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    146\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mnum\u001b[0m \u001b[1;33m<\u001b[0m \u001b[0mk\u001b[0m \u001b[1;33m-\u001b[0m \u001b[1;36m2\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 147\u001b[1;33m             \u001b[0mupdateR\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnum\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mburned\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    148\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    149\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mburned\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Users\\Public\\Documents\\Wondershare\\CreatorTemp/ipykernel_7708/42413006.py\u001b[0m in \u001b[0;36mupdateR\u001b[1;34m(num, burned)\u001b[0m\n\u001b[0;32m    106\u001b[0m                     \u001b[0mupburned\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mupburned\u001b[0m \u001b[1;33m+\u001b[0m \u001b[0mi\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    107\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 108\u001b[1;33m                 \u001b[0mupdateR\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnum\u001b[0m \u001b[1;33m-\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mupburned\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    109\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    110\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Users\\Public\\Documents\\Wondershare\\CreatorTemp/ipykernel_7708/42413006.py\u001b[0m in \u001b[0;36mupdateR\u001b[1;34m(num, burned)\u001b[0m\n\u001b[0;32m    145\u001b[0m         \u001b[1;31m# l_round = l_round - 1\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    146\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mnum\u001b[0m \u001b[1;33m<\u001b[0m \u001b[0mk\u001b[0m \u001b[1;33m-\u001b[0m \u001b[1;36m2\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 147\u001b[1;33m             \u001b[0mupdateR\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnum\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;36m1\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mburned\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    148\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    149\u001b[0m         \u001b[1;32mreturn\u001b[0m \u001b[0mburned\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\Users\\Public\\Documents\\Wondershare\\CreatorTemp/ipykernel_7708/42413006.py\u001b[0m in \u001b[0;36mupdateR\u001b[1;34m(num, burned)\u001b[0m\n\u001b[0;32m    110\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    111\u001b[0m         \u001b[1;31m# 1. pick burn and remove\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 112\u001b[1;33m         \u001b[0msource\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mnum\u001b[0m\u001b[1;33m]\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mR_dynamic\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mnum\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    113\u001b[0m         \u001b[0mR_dynamic\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mnum\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mremove\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mR_dynamic\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mnum\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    114\u001b[0m         \u001b[0mold_burned\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mburned\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": [
    "g = nx.random_tree(16)\n",
    "isklburnable(g, 4, 4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 3, 4, 8]"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = [[1,3],[4,8]]\n",
    "B = []\n",
    "B = B + A[0] + A[1]\n",
    "B"
   ]
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "93d2c5fae0cb062bda0a6de842d27e3b38c21e07c668431916235054c28d155b"
  },
  "kernelspec": {
   "display_name": "Python 3.9.7 ('base')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
